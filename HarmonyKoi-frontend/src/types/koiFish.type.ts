// types/koiFish.type.ts

import { SuccessResponse } from './response.type'

export interface Element {
  length: number

  id: string // Unique identifier for elements
  name: string // Name of the element
  description: string // Description of the element
}

export interface Variety {
  id: string // Unique identifier for varieties
  name: string // Name of the variety
  description: string // Description of the variety
}
export interface KoiFishAdd {
  variety?: {
    id: string
    name?: string // Make name optional if not always needed
  }
  name: string
  description: string
  imageUrl: string
  baseColor: string
  symbolism: string
  price: 0
  elementIds: [string]
}
export interface KoiFishAttributes {
  id?: string // Make id optional if it's generated by the backend
  variety?: {
    id: string
    name?: string // Make name optional if not always needed
  }
  name: string
  description: string
  imageUrl: string
  baseColor: string
  symbolism: string
  price: number
  elements?: Array<{
    id: string
    name?: string // Make name optional if not always needed
  }>
  elementIds: string[] // If you still want to keep elementIds separate
}

// Response type for fetching multiple koi fish
export type KoiFishResponse = {
  totalItem?: number // Total number of items (optional)
  data: KoiFishAttributes[] // Array of koi fish attributes
  pagination: {
    totalItem: number // Total items in the pagination
  }
}

// Response type for fetching varieties
export interface VarietiesResponse {
  data: Variety[] // Array of varieties
}

// Success response wrapper type for koi fish
export type KoiFishApiResponse = SuccessResponse<KoiFishAttributes[]>

// Detailed koi fish response including user info
export interface DetailedKoiFishResponse extends KoiFishAttributes {
  userName: string // Name of the user who added the fish
  isFeatured: boolean // Whether the fish is featured
}
